# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH="/home/jesse/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/robbyrussell/oh-my-zsh/wiki/Themes
ZSH_THEME="blinks"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in ~/.oh-my-zsh/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS=true

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in ~/.oh-my-zsh/plugins/*
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
    git
    cp
)

source $ZSH/oh-my-zsh.sh
autoload -U compinit promptinit
compinit
promptinit
# User configuration
unsetopt sharehistory
# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR="emacs -nw"
export VISUAL="emacs"
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

# DW Support _______________________________________________
function get_gerrithooks()
{
    curl -Lo $(git rev-parse --git-dir)/hooks/commit-msg http://gerritcodereview:8080/tools/hooks/commit-msg
    chmod +x $(git rev-parse --git-dir)/hooks/commit-msg
}

# OCAML Support ____________________________________________
eval $(opam env)
OPAM_SWITCH_PREFIX='/home/jesse/.opam/default'; export OPAM_SWITCH_PREFIX;
CAML_LD_LIBRARY_PATH='/home/jesse/.opam/default/lib/stublibs:/home/jesse/.opam/default/lib/ocaml/stublibs:/home/jesse/.opam/default/lib/ocaml'; export CAML_LD_LIBRARY_PATH;
OCAML_TOPLEVEL_PATH='/home/jesse/.opam/default/lib/toplevel'; export OCAML_TOPLEVEL_PATH;
MANPATH=':/home/jesse/.opam/default/man'; export MANPATH;
PATH=$HOME/.opam/default/bin:$PATH

# Xilinx Tools Support _____________________________________
function setup_xil_env(){
    local xsdk_path=/opt/Xilinx
    if [ -d ${xsdk_path} ]; then
        source ${xsdk_path}/SDK/2019.1/settings64.sh
    else
        echo "No XSDK install found at ${xsdk_path}"
    fi
}

function setup_petalinux_env() {
    local petalinux_path=/opt/PetaLinux
    if [ -d ${petalinux_path} ]; then
        alias start_petalinux="bash --rcfile <(echo '. ~/.bashrc; source /opt/PetaLinux/settings.sh')"
    else
        echo "No PetaLinux Install Found at ${petalinux_path}"
    fi
}

function setup_vivado_env(){
    local vivado_path=$1
    if [ -f ${vivado_path}/settings64.sh ]; then
        source ${vivado_path}/settings64.sh
        export XILINXD_LICENSE_FILE=1717@flexlm
        echo "Sourced Vivado settings from: ${vivado_path}"
    else
        echo "No Vivado install found at ${vivado_path}"
    fi
}


function sel4_container(){
    local container_path="$HOME/DornerWorksProjects/SSCI/git-repos/seL4-CAmkES-L4v-dockerfiles/"
    if [ -d "${container_path}" ]; then
        echo "Entering docker container ...."
        if [[ $# > 0 ]]; then
            echo " with a command"
            make -C ${container_path} user HOST_DIR=$(pwd) EXEC="bash -c '""$@""'"
        else
            echo " at the shell"
            make -C ${container_path} user HOST_DIR=$(pwd)
        fi
    else
        echo "Could not find container path"
        echo "searched: ${container_path}"
    fi
}

# Local Variables:
# mode: sh
# End:
