# ZSH RC for Jesse Millwood

export ZSH="/home/jesse/.oh-my-zsh"

ZSH_THEME="blinks"
DISABLE_AUTO_UPDATE="true"
ENABLE_CORRECTION="true"

plugins=(
    git
    cargo
    cp
    colored-man-pages
    rsync
    themes
)

source $ZSH/oh-my-zsh.sh
autoload -U compinit promptinit
compinit
promptinit

unsetopt sharehistory

export EDITOR="emacs -nw"
export VISUAL="emacs"
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Packages outside of oh-my-zsh installed to /usr/local/share/zsh/site-functions
export ZSH_SITEFUNCTIONS_DIR=/usr/local/share/zsh/site-functions
if [ -d ${ZSH_SITEFUNCTIONS_DIR}/zsh-autosuggestions ]; then
    source ${ZSH_SITEFUNCTIONS_DIR}/zsh-autosuggestions/zsh-autosuggestions.zsh
fi

if [ -f ${ZSH_SITEFUNCTIONS_DIR}/zsh-syntax-highlighting.zsh ]; then
    source ${ZSH_SITEFUNCTIONS_DIR}/zsh-syntax-highlighting.zsh
fi

# Conditional PATH Additions _______________________________
if [ -d /opt/Appimages ]; then
    export PATH=/opt/Appimages:$PATH
fi

if [ -d /usr/local/go ]; then
    export PATH=/usr/local/go/bin:$PATH
fi

if [ -d $HOME/.local/bin ]; then
    export PATH=$PATH:$HOME/.local/bin
fi

# DW Support _______________________________________________
function get_gerrithooks()
{
    curl -Lo $(git rev-parse --git-dir)/hooks/commit-msg http://gerritcodereview:8080/tools/hooks/commit-msg
    chmod +x $(git rev-parse --git-dir)/hooks/commit-msg
}

# OCAML Support ____________________________________________
eval $(opam env)

# Xilinx Tools Support _____________________________________
function setup_xil_tool(){
    local xil_tool=$1
    local install_locations=(/opt /mnt/DWBuntu_Extended/opt)
    case ${xil_tool} in
        "vivado")
            tool_regex_string="Vivado\/[0-9]\{4\}\.[0-9]"
            ;;
        "xsdk")
            tool_regex_string="SDK\/[0-9]\{4\}\.[0-9]"
            ;;
        "vitis")
            tool_regex_string="Vitis\/[0-9]\{4\}\.[0-9]"
            ;;
        *)
            echo "Error: Unknown Tool [${xil_tool}]"
            return 1
            ;;
    esac
    tool_settings=()
    tool_versions=()
    for location in ${install_locations}; do
        tool_settings+=($(find ${location}/{Xilinx,Vivado,Vitis} -maxdepth 5 -type f \
                               -name "settings64.sh" 2>/dev/null | \
                              grep "${tool_regex_string}"))
    done
    for tool_path in ${tool_settings}; do
        local tool_version=$(basename $(dirname ${tool_path}))
        tool_versions+=${tool_version}
    done
    echo "Choose Tool Version:"
    index=1
    for version in ${tool_versions}; do
        echo "[${index}] ${version} ($(dirname ${tool_settings[${index}]}))"
        index=$((index+1))
    done

    # Note: read syntax different between bash and zsh
    read "user_choice?> "
    chosen_version=${tool_versions[${user_choice}]}
    tool_settings_file=${tool_settings[${user_choice}]}
    if [ -f ${tool_settings_file} ]; then
        echo "Setting up environment for ${xil_tool} ${chosen_version}"
        source ${tool_settings_file}
        export XILINXD_LICENSE_FILE=1717@flexlm
    else
        echo "No ${xil_tool} install found at ${tool_settings_file}"
    fi

}

function load_xil_tool(){
    local xil_tool="none"
    case $1 in
        "vivado")
            xil_tool="vivado"
            ;;
        "xsdk")
            xil_tool="xsdk"
            ;;
        "vitis")
            xil_tool="vitis"
            ;;
        *)
            echo "Usage load_xil_tool <TOOL>"
            echo "Please choose one of the following tools: "
            echo " vivado"
            echo " xsdk"
            echo " vitis"
            return 1
            ;;
    esac
    echo "Loading ${xil_tool} Environment"
    setup_xil_tool ${xil_tool}
    return 0
}

function quartus_environment
{
    quartus_install_path=/mnt/DWBuntu_Extended/opt/intelfpga
    export PATH=$PATH:${quartus_install_path}/quartus/bin
    export PATH=$PATH:${quartus_install_path}/modelsim_ase/bin
    export PATH=$PATH:${quartus_install_path}/hls/bin
    export PATH=$PATH:${quartus_install_path}/nios2eds/bin
    export PATH=$PATH:${quartus_install_path}/gcc/bin
    export PATH=$PATH:${quartus_install_path}/hld/bin
    export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:${quartus_install_path}/hls/host/linux64/lib
    export LM_LICENSE_FILE=1717@licensingfpga
    echo "Started Quartus Environment"
    echo "==================================="
    echo "  - Path additions to the end: "
    echo "    - quartus/bin"
    echo "    - /modelsim_ase/bin"
    echo "    - /hls/bin"
    echo "    - /nios2eds/bin"
    echo "    - /gcc/bin"
    echo "    - /hld/bin"
    echo "  - Flexlm environment variable set ${LM_LICENSE_FILE}"
    echo "  - HLS sim libraries added to LD Library Path"
    echo "  - Usage: "
    echo "    - Start IDE: quartus"
    echo "    - HLS Bins: i++"
}

# seL4 Development Helpers _________________________________
function sel4_container(){
    local container_path="$HOME/Code/seL4/seL4-CAmkES-L4v-dockerfiles/"
    if [ -d "${container_path}" ]; then
        echo "Entering docker container ...."
        if [[ $# > 0 ]]; then
            echo " with a command"
            make -C ${container_path} user_camkes HOST_DIR=$(pwd) EXEC="bash -c '""$@""'"
        else
            echo " at the shell"
            make -C ${container_path} user_camkes HOST_DIR=$(pwd)
        fi
    else
        echo "Could not find container path"
        echo "searched: ${container_path}"
    fi
}

# Local Variables:
# mode: sh
# End:
