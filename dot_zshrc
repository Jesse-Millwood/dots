# ZSH RC for Jesse Millwood

export ZSH="/home/jesse/.oh-my-zsh"

ZSH_THEME="blinks"
DISABLE_AUTO_UPDATE="true"
ENABLE_CORRECTION="true"

plugins=(
    git
    cargo
    cp
    colored-man-pages
    rsync
    themes
)

source $ZSH/oh-my-zsh.sh
autoload -U compinit promptinit
compinit
promptinit

unsetopt sharehistory

export EDITOR="emacs -nw"
export VISUAL="emacs"
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='mvim'
# fi

# Conditional PATH Additions _______________________________
if [ -d /opt/Appimages ]; then
    export PATH=/opt/Appimages:$PATH
fi

if [ -d /usr/local/go ]; then
    export PATH=/usr/local/go/bin:$PATH
fi

# DW Support _______________________________________________
function get_gerrithooks()
{
    curl -Lo $(git rev-parse --git-dir)/hooks/commit-msg http://gerritcodereview:8080/tools/hooks/commit-msg
    chmod +x $(git rev-parse --git-dir)/hooks/commit-msg
}

# OCAML Support ____________________________________________
eval $(opam env)

# Xilinx Tools Support _____________________________________
function setup_xil_env(){
    local xsdk_path=/opt/Xilinx
    if [ -d ${xsdk_path} ]; then
        source ${xsdk_path}/SDK/2019.1/settings64.sh
    else
        echo "No XSDK install found at ${xsdk_path}"
    fi
}

function setup_petalinux_env() {
    local petalinux_path=/opt/PetaLinux
    if [ -d ${petalinux_path} ]; then
        alias start_petalinux="bash --rcfile <(echo '. ~/.bashrc; source /opt/PetaLinux/settings.sh')"
    else
        echo "No PetaLinux Install Found at ${petalinux_path}"
    fi
}

function setup_vivado_env(){
    local vivado_path=$1
    if [ -f ${vivado_path}/settings64.sh ]; then
        source ${vivado_path}/settings64.sh
        export XILINXD_LICENSE_FILE=1717@flexlm
        echo "Sourced Vivado settings from: ${vivado_path}"
    else
        echo "No Vivado install found at ${vivado_path}"
    fi
}

# seL4 Development Helpers _________________________________
function sel4_container(){
    local container_path="$HOME/DornerWorksProjects/SSCI/git-repos/seL4-CAmkES-L4v-dockerfiles/"
    if [ -d "${container_path}" ]; then
        echo "Entering docker container ...."
        if [[ $# > 0 ]]; then
            echo " with a command"
            make -C ${container_path} user HOST_DIR=$(pwd) EXEC="bash -c '""$@""'"
        else
            echo " at the shell"
            make -C ${container_path} user HOST_DIR=$(pwd)
        fi
    else
        echo "Could not find container path"
        echo "searched: ${container_path}"
    fi
}

# Local Variables:
# mode: sh
# End:
